openapi: 3.0.4
info:
  title: Pizza API - Subset
  description: API for managing pizza orders and related operations
  version: 1.0.0
servers:
  - url: https://func-pizza-api-vqqlxwmln5lf4.azurewebsites.net/api
    description: Production server
paths:
  /openapi:
    get:
      tags:
        - utility
      summary: Get OpenAPI specification
      description: Returns the OpenAPI specification in YAML format.
      operationId: getOpenApiSpec
      responses:
        '200':
          description: OpenAPI specification in YAML format
          content:
            text/yaml:
              schema:
                type: string
                example: "openapi: 3.0.3\ninfo:\n  title: Pizza API\n  version: 1.0.0\n...\n"
  /orders:
    get:
      tags:
        - orders
      summary: Get all orders
      description: Returns a list of all orders in the system
      operationId: getOrders
      parameters:
        - name: userId
          in: query
          description: Filter orders by userId
          explode: false
          schema:
            type: string
        - name: status
          in: query
          description: 'Filter orders by status (comma-separated for multiple, e.g. pending,ready)'
          explode: false
          schema:
            type: string
        - name: last
          in: query
          description: 'Filter orders created in the last X minutes/hours (e.g. 60m, 2h)'
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  required:
                    - id
                    - createdAt
                    - items
                    - estimatedCompletionAt
                    - totalPrice
                    - status
                  type: object
                  properties:
                    id:
                      type: string
                    createdAt:
                      type: string
                      format: date-time
                    items:
                      type: array
                      items:
                        required:
                          - pizzaId
                          - quantity
                        type: object
                        properties:
                          pizzaId:
                            type: string
                            example: pizza-1
                          quantity:
                            minimum: 1
                            type: integer
                            example: 1
                          extraToppingIds:
                            type: array
                            items:
                              type: string
                            description: Optional list of extra topping IDs to add to the pizza
                            example:
                              - topping-1
                              - topping-2
                    estimatedCompletionAt:
                      type: string
                      format: date-time
                    completedAt:
                      type: string
                      nullable: true
                      description: ISO date string for when the order was completed (undefined until completed)
                      format: date-time
                    totalPrice:
                      type: number
                      format: float
                    status:
                      enum:
                        - pending
                        - in-preparation
                        - ready
                        - completed
                        - cancelled
                      type: string
                      description: "- pending: Order has been created but not yet started - in-preparation: Order is being prepared - ready: Order is ready for pickup - completed: Order has been picked up - cancelled: Order has been cancelled\n"
                  description: Order object returned by the API (userId is omitted for privacy)
    post:
      tags:
        - orders
      summary: Create a new order
      description: "Places a new order with pizzas (requires userId).\n\nThe estimated completion time is as follows:\n- 3-5 minutes for 1-2 pizzas, plus 1 minute for each additional pizza.\n\nOrder statuses are updated automatically:\n- Orders move from 'pending' to 'in-preparation' 1-3 minutes after creation.\n- Orders move from 'in-preparation' to 'completed' 2-3 minutes around their estimated completion time.\n"
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              required:
                - userId
                - items
              type: object
              properties:
                userId:
                  type: string
                  example: user123
                items:
                  type: array
                  items:
                    required:
                      - pizzaId
                      - quantity
                    type: object
                    properties:
                      pizzaId:
                        type: string
                        example: pizza-1
                      quantity:
                        minimum: 1
                        type: integer
                        example: 1
                      extraToppingIds:
                        type: array
                        items:
                          type: string
                        description: Optional list of extra topping IDs to add to the pizza
                        example:
                          - topping-1
                          - topping-2
        required: true
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                required:
                  - id
                  - createdAt
                  - items
                  - estimatedCompletionAt
                  - totalPrice
                  - status
                type: object
                properties:
                  id:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                  items:
                    type: array
                    items:
                      required:
                        - pizzaId
                        - quantity
                      type: object
                      properties:
                        pizzaId:
                          type: string
                          example: pizza-1
                        quantity:
                          minimum: 1
                          type: integer
                          example: 1
                        extraToppingIds:
                          type: array
                          items:
                            type: string
                          description: Optional list of extra topping IDs to add to the pizza
                          example:
                            - topping-1
                            - topping-2
                  estimatedCompletionAt:
                    type: string
                    format: date-time
                  completedAt:
                    type: string
                    nullable: true
                    description: ISO date string for when the order was completed (undefined until completed)
                    format: date-time
                  totalPrice:
                    type: number
                    format: float
                  status:
                    enum:
                      - pending
                      - in-preparation
                      - ready
                      - completed
                      - cancelled
                    type: string
                    description: "- pending: Order has been created but not yet started - in-preparation: Order is being prepared - ready: Order is ready for pickup - completed: Order has been picked up - cancelled: Order has been cancelled\n"
                description: Order object returned by the API (userId is omitted for privacy)
  '/orders/{orderId}':
    get:
      tags:
        - orders
      summary: Get order by ID
      description: Retrieves an order by its ID
      operationId: getOrderById
      responses:
        '200':
          description: Order details found
          content:
            application/json:
              schema:
                required:
                  - id
                  - createdAt
                  - items
                  - estimatedCompletionAt
                  - totalPrice
                  - status
                type: object
                properties:
                  id:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                  items:
                    type: array
                    items:
                      required:
                        - pizzaId
                        - quantity
                      type: object
                      properties:
                        pizzaId:
                          type: string
                          example: pizza-1
                        quantity:
                          minimum: 1
                          type: integer
                          example: 1
                        extraToppingIds:
                          type: array
                          items:
                            type: string
                          description: Optional list of extra topping IDs to add to the pizza
                          example:
                            - topping-1
                            - topping-2
                  estimatedCompletionAt:
                    type: string
                    format: date-time
                  completedAt:
                    type: string
                    nullable: true
                    description: ISO date string for when the order was completed (undefined until completed)
                    format: date-time
                  totalPrice:
                    type: number
                    format: float
                  status:
                    enum:
                      - pending
                      - in-preparation
                      - ready
                      - completed
                      - cancelled
                    type: string
                    description: "- pending: Order has been created but not yet started - in-preparation: Order is being prepared - ready: Order is ready for pickup - completed: Order has been picked up - cancelled: Order has been cancelled\n"
                description: Order object returned by the API (userId is omitted for privacy)
    delete:
      tags:
        - orders
      summary: Cancel an order
      description: "Cancels an order if it has not yet been started (status must be 'pending').\n\nThe `userId` query parameter is required (e.g., `?userId=user123`).\nIf `userId` is missing or does not match the `userId` of the order, the request will be rejected.\n"
      operationId: cancelOrder
      parameters:
        - name: userId
          in: query
          description: ID of the user requesting the cancellation (required)
          required: true
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                required:
                  - id
                  - createdAt
                  - items
                  - estimatedCompletionAt
                  - totalPrice
                  - status
                type: object
                properties:
                  id:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                  items:
                    type: array
                    items:
                      required:
                        - pizzaId
                        - quantity
                      type: object
                      properties:
                        pizzaId:
                          type: string
                          example: pizza-1
                        quantity:
                          minimum: 1
                          type: integer
                          example: 1
                        extraToppingIds:
                          type: array
                          items:
                            type: string
                          description: Optional list of extra topping IDs to add to the pizza
                          example:
                            - topping-1
                            - topping-2
                  estimatedCompletionAt:
                    type: string
                    format: date-time
                  completedAt:
                    type: string
                    nullable: true
                    description: ISO date string for when the order was completed (undefined until completed)
                    format: date-time
                  totalPrice:
                    type: number
                    format: float
                  status:
                    enum:
                      - pending
                      - in-preparation
                      - ready
                      - completed
                      - cancelled
                    type: string
                    description: "- pending: Order has been created but not yet started - in-preparation: Order is being prepared - ready: Order is ready for pickup - completed: Order has been picked up - cancelled: Order has been cancelled\n"
                description: Order object returned by the API (userId is omitted for privacy)
    parameters:
      - name: orderId
        in: path
        description: ID of the order
        required: true
        schema:
          type: string
  /pizzas:
    get:
      tags:
        - pizzas
      summary: Get all pizzas
      description: Returns a list of all pizzas
      operationId: getPizzas
      responses:
        '200':
          description: List of pizzas
          content:
            application/json:
              schema:
                type: array
                items:
                  required:
                    - id
                    - category
                    - name
                    - description
                    - price
                  type: object
                  properties:
                    id:
                      type: string
                      example: pizza-1
                    category:
                      enum:
                        - pizza
                        - drink
                        - side
                        - topping
                      type: string
                    name:
                      type: string
                      example: Margherita Pizza
                    description:
                      type: string
                      example: Classic pizza with tomato sauce and mozzarella
                    price:
                      type: number
                      format: float
                      example: 12.99
  '/pizzas/{id}':
    get:
      tags:
        - pizzas
      summary: Get pizza by ID
      description: Retrieves a specific pizza by its ID
      operationId: getPizzaById
      responses:
        '200':
          description: Pizza details found
          content:
            application/json:
              schema:
                required:
                  - id
                  - category
                  - name
                  - description
                  - price
                type: object
                properties:
                  id:
                    type: string
                    example: pizza-1
                  category:
                    enum:
                      - pizza
                      - drink
                      - side
                      - topping
                    type: string
                  name:
                    type: string
                    example: Margherita Pizza
                  description:
                    type: string
                    example: Classic pizza with tomato sauce and mozzarella
                  price:
                    type: number
                    format: float
                    example: 12.99
    parameters:
      - name: id
        in: path
        description: ID of the pizza
        required: true
        schema:
          type: string
  /toppings:
    get:
      tags:
        - toppings
      summary: Get all toppings
      description: Returns a list of all toppings
      operationId: getToppings
      parameters:
        - name: category
          in: query
          description: Filter toppings by category
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: List of toppings
          content:
            application/json:
              schema:
                type: array
                items:
                  required:
                    - id
                    - category
                    - name
                    - description
                    - price
                  type: object
                  properties:
                    id:
                      type: string
                      example: pizza-1
                    category:
                      enum:
                        - pizza
                        - drink
                        - side
                        - topping
                      type: string
                    name:
                      type: string
                      example: Margherita Pizza
                    description:
                      type: string
                      example: Classic pizza with tomato sauce and mozzarella
                    price:
                      type: number
                      format: float
                      example: 12.99
  /toppings/categories:
    get:
      tags:
        - toppings
      summary: Get all topping categories
      description: Returns a list of all topping categories
      operationId: getToppingCategories
      responses:
        '200':
          description: List of topping categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  '/toppings/{id}':
    get:
      tags:
        - toppings
      summary: Get topping by ID
      description: Retrieves a specific topping by its ID
      operationId: getToppingById
      responses:
        '200':
          description: Topping details found
          content:
            application/json:
              schema:
                required:
                  - id
                  - category
                  - name
                  - description
                  - price
                type: object
                properties:
                  id:
                    type: string
                    example: pizza-1
                  category:
                    enum:
                      - pizza
                      - drink
                      - side
                      - topping
                    type: string
                  name:
                    type: string
                    example: Margherita Pizza
                  description:
                    type: string
                    example: Classic pizza with tomato sauce and mozzarella
                  price:
                    type: number
                    format: float
                    example: 12.99
    parameters:
      - name: id
        in: path
        description: ID of the topping
        required: true
        schema:
          type: string
  '/images/{filepath}':
    get:
      tags:
        - images
      summary: Get an image
      description: Retrieves an image from Azure Blob Storage
      operationId: getImage
      responses:
        '200':
          description: Image found and returned
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
            image/svg+xml:
              schema:
                type: string
                format: binary
    parameters:
      - name: filepath
        in: path
        description: Path to the image file in Azure Blob Storage
        required: true
        schema:
          type: string
components: { }